{
    "connections": [
        {
            "in_node": "draw_0",
            "in_port": "vertex_data",
            "out_node": "cgal_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "draw_1",
            "in_port": "vertex_data",
            "out_node": "cgal_1",
            "out_port": "vertex_data"
        },
        {
            "in_node": "program_0",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "normals_generator_0",
            "in_port": "input",
            "out_node": "loader_0",
            "out_port": "polyhedron"
        },
        {
            "in_node": "transform_0",
            "in_port": "in_mesh",
            "out_node": "loader_1",
            "out_port": "polyhedron"
        },
        {
            "in_node": "cgal_0",
            "in_port": "mesh",
            "out_node": "normals_generator_0",
            "out_port": "output"
        },
        {
            "in_node": "cgal_1",
            "in_port": "mesh",
            "out_node": "normals_generator_1",
            "out_port": "output"
        },
        {
            "in_node": "draw_0",
            "in_port": "program",
            "out_node": "program_0",
            "out_port": "program"
        },
        {
            "in_node": "draw_1",
            "in_port": "program",
            "out_node": "program_0",
            "out_port": "program"
        },
        {
            "in_node": "normals_generator_1",
            "in_port": "input",
            "out_node": "transform_0",
            "out_port": "out_mesh"
        },
        {
            "in_node": "program_0",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_0",
            "out_port": "shader"
        }
    ],
    "description": "### CGAL normals generation\n\nTo display a polygonal mesh on a GPU, the model needs to contain surface-normal information for shading. While this information can be auto-generated, an explicitly represented normal can improve surface properties like smoothness or shape details.\n\nThis simple demo shows [two methods of computing normals](https://doc.cgal.org/latest/Polygon_mesh_processing/index.html#PMPNormalComp) using the [CGAL library](https://www.cgal.org).",
    "name": "network",
    "nodes": {
        "cgal_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 613.1875,
                    "y": 557.625
                }
            },
            "name": "display",
            "ports": {
                "p_attr_name": "P"
            },
            "type": "render/vertex_data/cgal"
        },
        "cgal_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 970.169067382812,
                    "y": 547.933166503906
                }
            },
            "name": "display",
            "ports": {
                "p_attr_name": "P"
            },
            "type": "render/vertex_data/cgal"
        },
        "draw_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 803.634399414062,
                    "y": 550.318725585938
                }
            },
            "name": "draw",
            "ports": {
                "setup": {
                    "culling": "ccw"
                }
            },
            "type": "render/draw"
        },
        "draw_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 1160.61596679688,
                    "y": 540.626892089844
                }
            },
            "name": "draw",
            "ports": {
                "setup": {
                    "culling": "ccw"
                }
            },
            "type": "render/draw"
        },
        "fragment_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 339.618194580078,
                    "y": 899.029174804688
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nout vec4 color; \n \nin vec3 vertexNormal;\n \nvoid main() { \n\tvec3 norm = normalize(vertexNormal); \n \n\tcolor = vec4(norm.z, norm.z, norm.z, 1); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "loader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 616.021545410156,
                    "y": 238.676712036133
                }
            },
            "name": "loader",
            "ports": {
                "filename": "$EXAMPLES/stanford_models/bunny.obj",
                "name": "mesh"
            },
            "type": "cgal/loader"
        },
        "loader_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 960.080688476562,
                    "y": 70.6854019165039
                }
            },
            "name": "loader",
            "ports": {
                "filename": "$EXAMPLES/stanford_models/bunny.obj",
                "name": "mesh"
            },
            "type": "cgal/loader"
        },
        "network_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 640.902160644531,
                    "y": -70.2800598144531
                }
            },
            "name": "text",
            "ports": {
                "horiz_align": "Center",
                "rotation": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                },
                "scale": {
                    "x": 0.0299999993294477,
                    "y": 0.0299999993294477,
                    "z": 0.0299999993294477
                },
                "text": "Per-vertex",
                "translation": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                },
                "vert_align": "Top"
            },
            "source": "$NODES/render/text.psw",
            "type": "network"
        },
        "network_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 987.080871582031,
                    "y": -227.268081665039
                }
            },
            "name": "text",
            "ports": {
                "horiz_align": "Center",
                "rotation": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                },
                "scale": {
                    "x": 0.0299999993294477,
                    "y": 0.0299999993294477,
                    "z": 0.0299999993294477
                },
                "text": "Per-face",
                "translation": {
                    "x": 0.200000002980232,
                    "y": 0.0,
                    "z": 0.0
                },
                "vert_align": "Top"
            },
            "source": "$NODES/render/text.psw",
            "type": "network"
        },
        "normals_generator_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 582.5517578125,
                    "y": 398.321838378906
                }
            },
            "name": "normals_generator",
            "ports": {
                "attr_name": "N",
                "mode": "Per-vertex normals"
            },
            "type": "cgal/normals_generator"
        },
        "normals_generator_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 939.533325195312,
                    "y": 388.630035400391
                }
            },
            "name": "normals_generator",
            "ports": {
                "attr_name": "N",
                "mode": "Per-face normals"
            },
            "type": "cgal/normals_generator"
        },
        "program_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 566.618286132812,
                    "y": 831.190063476562
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "transform_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 964.612243652344,
                    "y": 200.636154174805
                }
            },
            "name": "transform",
            "ports": {
                "rotation": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                },
                "scale": {
                    "x": 1.0,
                    "y": 1.0,
                    "z": 1.0
                },
                "translation": {
                    "x": 0.200000002980232,
                    "y": 0.0,
                    "z": 0.0
                },
                "vec3_as_normals": true
            },
            "type": "cgal/transform"
        },
        "vertex_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 370.928588867188,
                    "y": 771.178588867188
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130 \n \nin vec3 P;                     // position attr from the vbo \nin vec3 N;                     // normals attr from the vbo \n \nuniform mat4 iProjection;      // projection matrix \nuniform mat4 iModelView;       // modelview matrix \nuniform mat4 iModelViewNormal; // modelview matrix for normals\n \nout vec3 vertexNormal;         // vertex normal for the fragment shader \n \nvoid main() {\n\tvertexNormal = (iModelViewNormal * vec4(N, 0.0)).xyz;\n   \tgl_Position = iProjection * iModelView * vec4(P, 1.0);\n} \n"
            },
            "type": "render/vertex_shader"
        }
    },
    "scene_config": {
        "end_time": 5.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "type": "network",
    "ui_geometry": "AdnQywADAAAAAAAAAAAAAAAABqoAAAOfAAAAAAAAAAAAAAQ6AAACfwAAAAACAAAABqsAAAAAAAAAFwAABqoAAAOf",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAL4AAAC+fwCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAAB1AAAC+QAAAJsBAAADAAAAAQAAAagAAAL5/AIAAAAD+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwEAAAB1AAABbAAAAHkBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAAB4gAAAYwAAACtAQAAA/sAAAAGAGwAbwBnAQAAAjoAAAGPAAAAAAAAAAAAAAIJAAAC+QAAAAQAAAAEAAAACAAAAAj8AAAAAQAAAAIAAAAA"
}