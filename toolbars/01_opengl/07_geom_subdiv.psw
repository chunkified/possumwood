{
    "connections": [
        {
            "in_node": "draw_1",
            "in_port": "vertex_data",
            "out_node": "cgal_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "draw_0",
            "in_port": "vertex_data",
            "out_node": "cgal_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "draw_2",
            "in_port": "vertex_data",
            "out_node": "cgal_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "program_0",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "program_1",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_1",
            "out_port": "shader"
        },
        {
            "in_node": "program_2",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_2",
            "out_port": "shader"
        },
        {
            "in_node": "program_0",
            "in_port": "geometry_shader",
            "out_node": "geometry_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "program_1",
            "in_port": "geometry_shader",
            "out_node": "geometry_shader_1",
            "out_port": "shader"
        },
        {
            "in_node": "draw_0",
            "in_port": "program",
            "out_node": "program_0",
            "out_port": "program"
        },
        {
            "in_node": "draw_1",
            "in_port": "program",
            "out_node": "program_1",
            "out_port": "program"
        },
        {
            "in_node": "draw_2",
            "in_port": "program",
            "out_node": "program_2",
            "out_port": "program"
        },
        {
            "in_node": "program_0",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "program_1",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_1",
            "out_port": "shader"
        },
        {
            "in_node": "program_2",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_2",
            "out_port": "shader"
        },
        {
            "in_node": "normals_generator_0",
            "in_port": "input",
            "out_node": "network_0",
            "out_port": "mesh"
        },
        {
            "in_node": "cgal_0",
            "in_port": "mesh",
            "out_node": "normals_generator_0",
            "out_port": "output"
        }
    ],
    "description": "### Mesh subdivision in a geometry shader\n\nWhile modern GPUs contain a bespoke functionality for subdivision, this simple demo shows how a similar (if limited) effect can be achieved using a simple geometry shader.\n\nThis demo implements a simple interpolative sudvision scheme with normal-based displacement. All subdivision computation is done in a geometry shader, with additional vertices and topology emitted by calling a recusive function. This approach is just a toy example, as it is strictly limited by the capabilities of individual GPUs - in practical applications, bespoke tesselation shaders perform much better.",
    "name": "network",
    "nodes": {
        "cgal_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -146.856689453125,
                    "y": 438.711273193359
                }
            },
            "name": "cgal",
            "ports": {
                "p_attr_name": "P"
            },
            "type": "render/vertex_data/cgal"
        },
        "draw_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 1212.8857421875,
                    "y": 507.678314208984
                }
            },
            "name": "draw",
            "ports": {
                "setup": {
                    "culling": "ccw"
                }
            },
            "type": "render/draw"
        },
        "draw_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 1031.40270996094,
                    "y": 21.9260063171387
                }
            },
            "name": "draw",
            "ports": {
                "setup": {
                    "culling": "ccw"
                }
            },
            "type": "render/draw"
        },
        "draw_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 593.822875976562,
                    "y": -416.904937744141
                }
            },
            "name": "draw",
            "ports": {
                "setup": {
                    "culling": "ccw"
                }
            },
            "type": "render/draw"
        },
        "fragment_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 675.144897460938,
                    "y": 463.065155029297
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nout vec4 color; \n \nin vec3 vertexPosition; \n \nvoid main() { \n\tvec3 dx = dFdx(vertexPosition); \n\tvec3 dy = dFdy(vertexPosition); \n \n\tvec3 norm = normalize(cross(dx, dy));\n\n\tfloat val = abs(norm.z);\n\tcolor = vec4(val, val, val, 1); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "fragment_shader_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 531.282409667969,
                    "y": 25.8553714752197
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nout vec4 color; \n \nin vec3 vertexPosition; \n \nvoid main() { \n\tvec3 dx = dFdx(vertexPosition); \n\tvec3 dy = dFdy(vertexPosition); \n \n\tvec3 norm = normalize(cross(dx, dy));\n\n\tfloat val = abs(norm.z);\n\tcolor = vec4(val, val, val, 1); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "fragment_shader_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 203.986038208008,
                    "y": -463.2265625
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nout vec4 color; \n \nin vec3 pos; \n \nvoid main() { \n\tvec3 dx = dFdx(pos); \n\tvec3 dy = dFdy(pos); \n \n\tvec3 norm = normalize(cross(dx, dy));\n\n\tfloat val = abs(norm.z);\n\tcolor = vec4(val, val, val, 1); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "geometry_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 681.82666015625,
                    "y": 340.503601074219
                }
            },
            "name": "geometry_shader",
            "ports": {
                "source": "#version 440\n\nlayout(triangles) in;\nlayout(triangle_strip, max_vertices = 3*4*4) out;\n\nuniform mat4 iProjection;\n\nin vec3 pos[];\nin vec3 normal[];\n\nout vec3 vertexPosition;\nout vec3 vertexNormal;\n\nvoid emitVertex(vec3 p, vec3 n) {\n\tvertexNormal = n;\n\tvertexPosition = p;\n\tgl_Position = iProjection * vec4(vertexPosition, 1.0);\n\n\tEmitVertex();\n}\n\nvoid emitTriangle(vec3 p1, vec3 n1, vec3 p2, vec3 n2, vec3 p3, vec3 n3) {\n\temitVertex(p1, n2);\n\temitVertex(p2, n2);\n\temitVertex(p3, n3);\n\t\n\tEndPrimitive();\n}\n\nvec3 midPos(vec3 p1, vec3 n1, vec3 p2, vec3 n2) {\n\tvec3 nmid = normalize(n1 + n2);\n\n\treturn (p1 + p2) / 2.0 + nmid * (1.0 - dot(n1, nmid)) * length(p1-p2) / 2;\n}\n\nvoid subdivTriangle1(vec3 p1, vec3 n1, vec3 p2, vec3 n2, vec3 p3, vec3 n3) {\n\tvec3 nmid1 = normalize(n1 + n2);\n\tvec3 nmid2 = normalize(n2 + n3);\n\tvec3 nmid3 = normalize(n3 + n1);\n\n\tvec3 pmid1 = midPos(p1, n1, p2, n2);\n\tvec3 pmid2 = midPos(p2, n2, p3, n3);\n\tvec3 pmid3 = midPos(p3, n3, p1, n1);\n\n\temitTriangle(p1, n1, pmid1, nmid1, pmid3, nmid3);\n\temitTriangle(p2, n2, pmid2, nmid2, pmid1, nmid1);\n\temitTriangle(p3, n3, pmid3, nmid3, pmid2, nmid2);\n\temitTriangle(pmid1, nmid1, pmid2, nmid2, pmid3, nmid3);\n}\n\nvoid subdivTriangle2(vec3 p1, vec3 n1, vec3 p2, vec3 n2, vec3 p3, vec3 n3) {\n\tvec3 nmid1 = normalize(n1 + n2);\n\tvec3 nmid2 = normalize(n2 + n3);\n\tvec3 nmid3 = normalize(n3 + n1);\n\n\tvec3 pmid1 = midPos(p1, n1, p2, n2);\n\tvec3 pmid2 = midPos(p2, n2, p3, n3);\n\tvec3 pmid3 = midPos(p3, n3, p1, n1);\n\n\tsubdivTriangle1(p1, n1, pmid1, nmid1, pmid3, nmid3);\n\tsubdivTriangle1(p2, n2, pmid2, nmid2, pmid1, nmid1);\n\tsubdivTriangle1(p3, n3, pmid3, nmid3, pmid2, nmid2);\n\tsubdivTriangle1(pmid1, nmid1, pmid2, nmid2, pmid3, nmid3);\n}\n\nvoid main() {\n\tsubdivTriangle2(pos[0], normal[0], pos[1], normal[1], pos[2], normal[2]);\n} \n"
            },
            "type": "render/geometry_shader"
        },
        "geometry_shader_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 537.964172363281,
                    "y": -96.7062454223633
                }
            },
            "name": "geometry_shader",
            "ports": {
                "source": "#version 440\n\nlayout(triangles) in;\nlayout(triangle_strip, max_vertices = 3*4*4) out;\n\nuniform mat4 iProjection;\n\nin vec3 pos[];\nin vec3 normal[];\n\nout vec3 vertexPosition;\nout vec3 vertexNormal;\n\nvoid emitVertex(vec3 p, vec3 n) {\n\tvertexNormal = n;\n\tvertexPosition = p;\n\tgl_Position = iProjection * vec4(vertexPosition, 1.0);\n\n\tEmitVertex();\n}\n\nvoid emitTriangle(vec3 p1, vec3 n1, vec3 p2, vec3 n2, vec3 p3, vec3 n3) {\n\temitVertex(p1, n2);\n\temitVertex(p2, n2);\n\temitVertex(p3, n3);\n\t\n\tEndPrimitive();\n}\n\nvec3 midPos(vec3 p1, vec3 n1, vec3 p2, vec3 n2) {\n\tvec3 nmid = normalize(n1 + n2);\n\n\treturn (p1 + p2) / 2.0 + nmid * (1.0 - dot(n1, nmid)) * length(p1-p2) / 2;\n}\n\nvoid subdivTriangle1(vec3 p1, vec3 n1, vec3 p2, vec3 n2, vec3 p3, vec3 n3) {\n\tvec3 nmid1 = normalize(n1 + n2);\n\tvec3 nmid2 = normalize(n2 + n3);\n\tvec3 nmid3 = normalize(n3 + n1);\n\n\tvec3 pmid1 = midPos(p1, n1, p2, n2);\n\tvec3 pmid2 = midPos(p2, n2, p3, n3);\n\tvec3 pmid3 = midPos(p3, n3, p1, n1);\n\n\temitTriangle(p1, n1, pmid1, nmid1, pmid3, nmid3);\n\temitTriangle(p2, n2, pmid2, nmid2, pmid1, nmid1);\n\temitTriangle(p3, n3, pmid3, nmid3, pmid2, nmid2);\n\temitTriangle(pmid1, nmid1, pmid2, nmid2, pmid3, nmid3);\n}\n\nvoid main() {\n\tsubdivTriangle1(pos[0], normal[0], pos[1], normal[1], pos[2], normal[2]);\n} \n"
            },
            "type": "render/geometry_shader"
        },
        "network_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -157.428619384766,
                    "y": 117.093826293945
                }
            },
            "name": "tetrahedron",
            "ports": {
                "diameter": 1.0
            },
            "source": "$NODES/cgal/primitives/tetrahedron.psw",
            "type": "network"
        },
        "normals_generator_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -186.015640258789,
                    "y": 253.584487915039
                }
            },
            "name": "normals_generator",
            "ports": {
                "attr_name": "N",
                "mode": "Per-vertex normals"
            },
            "type": "cgal/normals_generator"
        },
        "program_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 1032.82373046875,
                    "y": 319.701904296875
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "program_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 861.501220703125,
                    "y": -81.9713439941406
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "program_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 402.495239257812,
                    "y": -513.392700195312
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "vertex_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 735.17041015625,
                    "y": 214.31608581543
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130 \n\nvec3 offset = vec3(2,0,0);\n\nout vec3 normal;\nout vec3 pos;\n \nin vec3 P;\nin vec3 N;\n\nuniform mat4 iProjection;\nuniform mat4 iModelView;\nuniform mat4 iModelViewNormal;\n \n \nvoid main() {\n\tvec4 pos4 = vec4(vec3(P) + offset, 1);\n\n\tnormal = (iModelViewNormal * vec4(N.xyz, 1)).xyz;\n\tpos = (iModelView * pos4).xyz;\n} \n"
            },
            "type": "render/vertex_shader"
        },
        "vertex_shader_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 591.307922363281,
                    "y": -222.893737792969
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130 \n\nvec3 offset = vec3(0,0,0);\n\nout vec3 normal;\nout vec3 pos;\n \nin vec3 P;\nin vec3 N;\n\nuniform mat4 iProjection;\nuniform mat4 iModelView;\nuniform mat4 iModelViewNormal;\n \n \nvoid main() {\n\tvec4 pos4 = vec4(vec3(P) + offset, 1);\n\n\tnormal = (iModelViewNormal * vec4(N.xyz, 1)).xyz;\n\tpos = (iModelView * pos4).xyz;\n} \n"
            },
            "type": "render/vertex_shader"
        },
        "vertex_shader_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 235.31037902832,
                    "y": -565.860717773438
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130 \n\nvec3 offset = vec3(-2,0,0);\n\nout vec3 pos;\n \nin vec3 P;\n\nuniform mat4 iProjection;\nuniform mat4 iModelView;\nuniform mat4 iModelViewNormal;\n \n \nvoid main() {\n\tvec4 pos4 = vec4(vec3(P) + offset, 1);\n\n\tpos = (iModelView * pos4).xyz;\n\tgl_Position = iProjection * iModelView * pos4;\n} \n"
            },
            "type": "render/vertex_shader"
        }
    },
    "scene_config": {
        "end_time": 5.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "type": "network",
    "ui_geometry": "AdnQywADAAAAAAAAAAAAAAAACf8AAAV3AAAAAAAAABQAAAXlAAACqQAAAAACAAAACgAAAAAAAAAAHAAACf8AAAV3",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAQiAAAEw/wCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAAB6AAAEwwAAAJ8BAAADAAAAAQAAAvwAAATD/AIAAAAC+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwEAAAB6AAABVAAAAHkBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAABzwAAA24AAACxAQAAAwAAAuAAAATDAAAABAAAAAQAAAAIAAAACPwAAAAA"
}