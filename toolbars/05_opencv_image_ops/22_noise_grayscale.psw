{
    "connections": [
        {
            "in_node": "network_0",
            "in_port": "frame",
            "out_node": "color_0",
            "out_port": "out_frame"
        },
        {
            "in_node": "convert_1",
            "in_port": "in_frame",
            "out_node": "color_1",
            "out_port": "out_frame"
        },
        {
            "in_node": "denoise_0",
            "in_port": "in_frame",
            "out_node": "color_1",
            "out_port": "out_frame"
        },
        {
            "in_node": "subtract_0",
            "in_port": "in_frame_2",
            "out_node": "convert_0",
            "out_port": "out_frame"
        },
        {
            "in_node": "subtract_0",
            "in_port": "in_frame_1",
            "out_node": "convert_1",
            "out_port": "out_frame"
        },
        {
            "in_node": "equalize_0",
            "in_port": "in_frame",
            "out_node": "convert_2",
            "out_port": "out_frame"
        },
        {
            "in_node": "convert_0",
            "in_port": "in_frame",
            "out_node": "denoise_0",
            "out_port": "out_frame"
        },
        {
            "in_node": "color_0",
            "in_port": "in_frame",
            "out_node": "equalize_0",
            "out_port": "out_frame"
        },
        {
            "in_node": "color_1",
            "in_port": "in_frame",
            "out_node": "image_0",
            "out_port": "frame"
        },
        {
            "in_node": "convert_2",
            "in_port": "in_frame",
            "out_node": "subtract_0",
            "out_port": "out_frame"
        }
    ],
    "description": "### Visualising luminance noise\n\nThis tutorial follows the [OpenCV's denoising tutorial](https://docs.opencv.org/3.4/d5/d69/tutorial_py_non_local_means.html) for grayscale images, but at the end of the processing it subtracts the denoised image from the original (leaving only extracted noise), and [equalises](https://en.wikipedia.org/wiki/Histogram_equalization) the result using [`cv::equalizeHist()`](https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/histogram_equalization/histogram_equalization.html) to show the noise structure.",
    "nodes": {
        "color_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -12.1841115951538,
                    "y": 664.247192382812
                }
            },
            "name": "to_bgr",
            "ports": {
                "mode": "GRAY2BGR"
            },
            "type": "opencv/color"
        },
        "color_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -6.81779766082764,
                    "y": -442.84912109375
                }
            },
            "name": "to_gray",
            "ports": {
                "mode": "BGR2GRAY"
            },
            "type": "opencv/color"
        },
        "convert_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 94.83447265625,
                    "y": 3.06760597229004
                }
            },
            "name": "to_float",
            "ports": {
                "a": 1.0,
                "b": 0.0,
                "mode": "CV_32F"
            },
            "type": "opencv/convert"
        },
        "convert_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -125.673751831055,
                    "y": 11.8025789260864
                }
            },
            "name": "to_float",
            "ports": {
                "a": 1.0,
                "b": 0.0,
                "mode": "CV_32F"
            },
            "type": "opencv/convert"
        },
        "convert_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -13.9455451965332,
                    "y": 350.808990478516
                }
            },
            "name": "to_8bit",
            "ports": {
                "a": 1.0,
                "b": 128.0,
                "mode": "CV_8U"
            },
            "type": "opencv/convert"
        },
        "denoise_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 84.8878936767578,
                    "y": -223.045959472656
                }
            },
            "name": "denoise",
            "ports": {
                "block_size": 7,
                "h": 50.0,
                "photo_render": 10.0,
                "search_window": 21
            },
            "type": "opencv/filter/denoise"
        },
        "equalize_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -14.8502426147461,
                    "y": 542.792053222656
                }
            },
            "name": "equalize",
            "type": "opencv/equalize"
        },
        "image_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -2.2155909538269,
                    "y": -571.371459960938
                }
            },
            "name": "image",
            "ports": {
                "filename": "$EXAMPLES/pexels/adorable-beautiful-beauty-2418886.jpg"
            },
            "type": "opencv/capture/image"
        },
        "network_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -11.5760564804077,
                    "y": 811.432067871094
                }
            },
            "connections": [
                {
                    "in_node": "draw_0",
                    "in_port": "vertex_data",
                    "out_node": "background_0",
                    "out_port": "vertex_data"
                },
                {
                    "in_node": "program_0",
                    "in_port": "fragment_shader",
                    "out_node": "fragment_shader_0",
                    "out_port": "shader"
                },
                {
                    "in_node": "metadata_0",
                    "in_port": "frame",
                    "out_node": "input_0",
                    "out_port": "data"
                },
                {
                    "in_node": "opencv_texture_0",
                    "in_port": "frame",
                    "out_node": "input_0",
                    "out_port": "data"
                },
                {
                    "in_node": "split_vec2u_0",
                    "in_port": "vec",
                    "out_node": "metadata_0",
                    "out_port": "size"
                },
                {
                    "in_node": "viewport_0",
                    "in_port": "in_uniforms",
                    "out_node": "opencv_texture_0",
                    "out_port": "out_uniforms"
                },
                {
                    "in_node": "draw_0",
                    "in_port": "program",
                    "out_node": "program_0",
                    "out_port": "program"
                },
                {
                    "in_node": "unsigned_1",
                    "in_port": "value",
                    "out_node": "split_vec2u_0",
                    "out_port": "x"
                },
                {
                    "in_node": "unsigned_0",
                    "in_port": "value",
                    "out_node": "split_vec2u_0",
                    "out_port": "y"
                },
                {
                    "in_node": "opencv_texture_0",
                    "in_port": "in_uniforms",
                    "out_node": "unsigned_0",
                    "out_port": "out_uniforms"
                },
                {
                    "in_node": "unsigned_0",
                    "in_port": "in_uniforms",
                    "out_node": "unsigned_1",
                    "out_port": "out_uniforms"
                },
                {
                    "in_node": "program_0",
                    "in_port": "vertex_shader",
                    "out_node": "vertex_shader_0",
                    "out_port": "shader"
                },
                {
                    "in_node": "draw_0",
                    "in_port": "uniforms",
                    "out_node": "viewport_0",
                    "out_port": "out_uniforms"
                }
            ],
            "name": "network",
            "nodes": {
                "background_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 378.493469238281,
                            "y": 846.5810546875
                        }
                    },
                    "name": "background",
                    "type": "render/vertex_data/background"
                },
                "draw_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 597.115966796875,
                            "y": 727.212646484375
                        }
                    },
                    "name": "draw",
                    "type": "render/draw"
                },
                "fragment_shader_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 168.251327514648,
                            "y": 736.723999023438
                        }
                    },
                    "name": "fragment_shader",
                    "ports": {
                        "source": "#version 130 \n \nout vec4 color; \n \nin vec2 uv; \n\nuniform sampler2D image;\n\nvoid main() { \n\tif(uv.y < 0.0 || uv.y > 1.0)\n\t\tcolor = vec4(0,0,0,1);\n\telse\n\t\tcolor = vec4(texture(image, vec2(uv.x, 1.0-uv.y))); \n} \n"
                    },
                    "type": "render/fragment_shader"
                },
                "input_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 85.1487731933594,
                            "y": -211.483215332031
                        }
                    },
                    "name": "frame",
                    "type": "input"
                },
                "metadata_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 165.910888671875,
                            "y": 117.083778381348
                        }
                    },
                    "name": "opencv_metadata",
                    "type": "opencv/metadata"
                },
                "opencv_texture_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 562.957153320312,
                            "y": 428.043426513672
                        }
                    },
                    "name": "opencv_texture",
                    "ports": {
                        "mode": "Linear",
                        "name": "image"
                    },
                    "type": "render/uniforms/opencv_texture"
                },
                "program_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 374.836456298828,
                            "y": 625.601623535156
                        }
                    },
                    "name": "program",
                    "type": "render/program"
                },
                "split_vec2u_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 390.653747558594,
                            "y": 188.958908081055
                        }
                    },
                    "name": "split_vec2u",
                    "type": "maths/split_vec2u"
                },
                "unsigned_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 570.666015625,
                            "y": 243.660018920898
                        }
                    },
                    "name": "unsigned height",
                    "ports": {
                        "name": "image_height"
                    },
                    "type": "render/uniforms/unsigned"
                },
                "unsigned_1": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 567.202209472656,
                            "y": 58.0921211242676
                        }
                    },
                    "name": "unsigned width",
                    "ports": {
                        "name": "image_width"
                    },
                    "type": "render/uniforms/unsigned"
                },
                "vertex_shader_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 197.651947021484,
                            "y": 524.369689941406
                        }
                    },
                    "name": "vertex_shader",
                    "ports": {
                        "source": "#version 130 \n \nin vec3 P;                     // position attr from the vbo \n \nuniform mat4 iProjection;      // projection matrix \nuniform mat4 iModelView;       // modelview matrix \n\nuniform uint image_width;\nuniform uint image_height;\nuniform vec2 iResolution;\n\nout vec2 uv;                   // uv texturing parameters\n \nvoid main() {\n\t// compute the aspect ratio from image width and height\n\tfloat aspect = float(image_width) / float(image_height);\n\n\t// compute the screen aspect ratio\n\tfloat screen_aspect = iResolution.x / iResolution.y;\n\n\tgl_Position = vec4(P.x, P.y, 0, 1);\n\n\t// UV parameters are just untransformed world-space position\n\tuv = vec2(P/2.0);\n\tuv.y *= aspect / screen_aspect;\n\tuv += 0.5;\n} \n"
                    },
                    "type": "render/vertex_shader"
                },
                "viewport_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 597.060607910156,
                            "y": 600.486389160156
                        }
                    },
                    "name": "viewport",
                    "type": "render/uniforms/viewport"
                }
            },
            "type": "network"
        },
        "subtract_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -61.0923385620117,
                    "y": 227.272720336914
                }
            },
            "name": "subtract",
            "type": "opencv/maths/subtract"
        }
    },
    "scene_config": {
        "end_time": 5.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "ui_geometry": "AdnQywADAAAAAAAAAAAAAQAABqoAAAOfAAAAAAAAABQAAASlAAACVQAAAAACAAAABqsAAAAAAAAAFwAABqoAAAOf",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAL8AAAC+fwCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAAB1AAAC+QAAAJgBAAADAAAAAQAAAagAAAL5/AIAAAAC+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwEAAAB1AAAA4gAAAHYBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAABWAAAAhYAAACqAQAAAwAAAgUAAAL5AAAABAAAAAQAAAAIAAAACPwAAAAA"
}
