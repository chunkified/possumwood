{
    "connections": [
        {
            "in_node": "add_exif_1",
            "in_port": "in_sequence",
            "out_node": "add_exif_0",
            "out_port": "out_sequence"
        },
        {
            "in_node": "add_exif_2",
            "in_port": "in_sequence",
            "out_node": "add_exif_1",
            "out_port": "out_sequence"
        },
        {
            "in_node": "add_exif_3",
            "in_port": "in_sequence",
            "out_node": "add_exif_2",
            "out_port": "out_sequence"
        },
        {
            "in_node": "add_exif_4",
            "in_port": "in_sequence",
            "out_node": "add_exif_3",
            "out_port": "out_sequence"
        },
        {
            "in_node": "calibrate_debevec_0",
            "in_port": "exif_sequence",
            "out_node": "add_exif_4",
            "out_port": "out_sequence"
        },
        {
            "in_node": "add_frame_1",
            "in_port": "in_sequence",
            "out_node": "add_frame_0",
            "out_port": "out_sequence"
        },
        {
            "in_node": "add_frame_2",
            "in_port": "in_sequence",
            "out_node": "add_frame_1",
            "out_port": "out_sequence"
        },
        {
            "in_node": "add_frame_3",
            "in_port": "in_sequence",
            "out_node": "add_frame_2",
            "out_port": "out_sequence"
        },
        {
            "in_node": "add_frame_4",
            "in_port": "in_sequence",
            "out_node": "add_frame_3",
            "out_port": "out_sequence"
        },
        {
            "in_node": "calibrate_debevec_0",
            "in_port": "image_sequence",
            "out_node": "add_frame_4",
            "out_port": "out_sequence"
        },
        {
            "in_node": "merge_debevec_0",
            "in_port": "sequence",
            "out_node": "add_frame_4",
            "out_port": "out_sequence"
        },
        {
            "in_node": "add_frame_0",
            "in_port": "frame",
            "out_node": "align_mtb_0",
            "out_port": "out_frame"
        },
        {
            "in_node": "add_frame_1",
            "in_port": "frame",
            "out_node": "align_mtb_1",
            "out_port": "out_frame"
        },
        {
            "in_node": "add_frame_3",
            "in_port": "frame",
            "out_node": "align_mtb_2",
            "out_port": "out_frame"
        },
        {
            "in_node": "add_frame_4",
            "in_port": "frame",
            "out_node": "align_mtb_3",
            "out_port": "out_frame"
        },
        {
            "in_node": "merge_debevec_0",
            "in_port": "camera_response",
            "out_node": "calibrate_debevec_0",
            "out_port": "camera_response"
        },
        {
            "in_node": "network_0",
            "in_port": "frame",
            "out_node": "convert_0",
            "out_port": "out_frame"
        },
        {
            "in_node": "convert_0",
            "in_port": "in_frame",
            "out_node": "gamma_0",
            "out_port": "out_frame"
        },
        {
            "in_node": "align_mtb_1",
            "in_port": "original",
            "out_node": "image_0",
            "out_port": "frame"
        },
        {
            "in_node": "align_mtb_2",
            "in_port": "original",
            "out_node": "image_0",
            "out_port": "frame"
        },
        {
            "in_node": "add_frame_2",
            "in_port": "frame",
            "out_node": "image_0",
            "out_port": "frame"
        },
        {
            "in_node": "align_mtb_0",
            "in_port": "original",
            "out_node": "image_0",
            "out_port": "frame"
        },
        {
            "in_node": "align_mtb_3",
            "in_port": "original",
            "out_node": "image_0",
            "out_port": "frame"
        },
        {
            "in_node": "add_exif_2",
            "in_port": "exif",
            "out_node": "image_0",
            "out_port": "exif"
        },
        {
            "in_node": "align_mtb_0",
            "in_port": "to_align",
            "out_node": "image_1",
            "out_port": "frame"
        },
        {
            "in_node": "add_exif_0",
            "in_port": "exif",
            "out_node": "image_1",
            "out_port": "exif"
        },
        {
            "in_node": "align_mtb_1",
            "in_port": "to_align",
            "out_node": "image_2",
            "out_port": "frame"
        },
        {
            "in_node": "add_exif_1",
            "in_port": "exif",
            "out_node": "image_2",
            "out_port": "exif"
        },
        {
            "in_node": "align_mtb_2",
            "in_port": "to_align",
            "out_node": "image_3",
            "out_port": "frame"
        },
        {
            "in_node": "add_exif_3",
            "in_port": "exif",
            "out_node": "image_3",
            "out_port": "exif"
        },
        {
            "in_node": "align_mtb_3",
            "in_port": "to_align",
            "out_node": "image_4",
            "out_port": "frame"
        },
        {
            "in_node": "add_exif_4",
            "in_port": "exif",
            "out_node": "image_4",
            "out_port": "exif"
        },
        {
            "in_node": "gamma_0",
            "in_port": "in_frame",
            "out_node": "merge_debevec_0",
            "out_port": "frame"
        }
    ],
    "description": "### Aligned HDR merge using Debevec algorithm with response curve estimation\n\nWhen merging multiple exposures for HDR imaging, it is often beneficial to use raw image data, avoiding any processing and gamma correction a camera might do to produce a perceptually good looking result. In some cases, when using cheaper cameras or a mobile phone, it might not be possible to use raw data, which means that an additional calibration step is required.\n\nThis setup shows how to use EXIF data from a set of JPG images to estimate the camera response curve using Debevec's algorithm, and then use the resulting curve for a more accurate HDR merge using Debevec's HDR merge algorithm. Compared to previous demos using Merten's algorithm, the dynamic range of the resulting image is much wider, with a more accurate representation of luminance information present in the scene.\n\n<sub>Debevec, Paul E., and Jitendra Malik. [\"Recovering high dynamic range radiance maps from photographs.\"](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.463.6496&rep=rep1&type=pdf) ACM SIGGRAPH 2008 classes. ACM, 2008.</sub>",
    "nodes": {
        "add_exif_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 60.8790969848633,
                    "y": 1196.63586425781
                }
            },
            "name": "add_exif",
            "type": "opencv/sequence/add_exif"
        },
        "add_exif_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 230.610946655273,
                    "y": 1232.54309082031
                }
            },
            "name": "add_exif",
            "type": "opencv/sequence/add_exif"
        },
        "add_exif_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 391.091857910156,
                    "y": 1263.26062011719
                }
            },
            "name": "add_exif",
            "type": "opencv/sequence/add_exif"
        },
        "add_exif_3": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 548.613342285156,
                    "y": 1289.18054199219
                }
            },
            "name": "add_exif",
            "type": "opencv/sequence/add_exif"
        },
        "add_exif_4": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 731.366760253906,
                    "y": 1320.49084472656
                }
            },
            "name": "add_exif",
            "type": "opencv/sequence/add_exif"
        },
        "add_frame_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -4.38232803344727,
                    "y": 1024.9208984375
                }
            },
            "name": "add_frame",
            "type": "opencv/sequence/add_frame"
        },
        "add_frame_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 148.601852416992,
                    "y": 1047.94104003906
                }
            },
            "name": "add_frame",
            "type": "opencv/sequence/add_frame"
        },
        "add_frame_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 314.341430664062,
                    "y": 1072.87890625
                }
            },
            "name": "add_frame",
            "type": "opencv/sequence/add_frame"
        },
        "add_frame_3": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 481.998626708984,
                    "y": 1098.25427246094
                }
            },
            "name": "add_frame",
            "type": "opencv/sequence/add_frame"
        },
        "add_frame_4": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 640.401733398438,
                    "y": 1120.09692382812
                }
            },
            "name": "add_frame",
            "type": "opencv/sequence/add_frame"
        },
        "align_mtb_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -43.2730102539062,
                    "y": 770.881530761719
                }
            },
            "name": "align_mtb",
            "ports": {
                "cut": true,
                "exclude_range": 4,
                "max_bits": 6
            },
            "type": "opencv/hdr/align_mtb"
        },
        "align_mtb_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 141.389450073242,
                    "y": 772.315368652344
                }
            },
            "name": "align_mtb",
            "ports": {
                "cut": true,
                "exclude_range": 4,
                "max_bits": 6
            },
            "type": "opencv/hdr/align_mtb"
        },
        "align_mtb_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 451.273681640625,
                    "y": 800.619079589844
                }
            },
            "name": "align_mtb",
            "ports": {
                "cut": true,
                "exclude_range": 4,
                "max_bits": 6
            },
            "type": "opencv/hdr/align_mtb"
        },
        "align_mtb_3": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 643.494384765625,
                    "y": 804.437133789062
                }
            },
            "name": "align_mtb",
            "ports": {
                "cut": true,
                "exclude_range": 4,
                "max_bits": 6
            },
            "type": "opencv/hdr/align_mtb"
        },
        "calibrate_debevec_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 909.367004394531,
                    "y": 1284.57763671875
                }
            },
            "name": "calibrate_debevec",
            "ports": {
                "lambda": 150.0,
                "random": false,
                "samples": 70
            },
            "type": "opencv/hdr/calibrate_debevec"
        },
        "convert_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 1225.39904785156,
                    "y": 1507.05090332031
                }
            },
            "name": "convert",
            "ports": {
                "a": 30.0,
                "b": 0.0,
                "mode": "CV_8U"
            },
            "type": "opencv/convert"
        },
        "gamma_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 1195.39538574219,
                    "y": 1345.92211914062
                }
            },
            "name": "gamma",
            "ports": {
                "gamma": 0.300000011920929,
                "normalization_coef": 1.0
            },
            "type": "opencv/gamma"
        },
        "image_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 358.595764160156,
                    "y": 464.301300048828
                }
            },
            "name": "image_0",
            "ports": {
                "filename": "$EXAMPLES/opencv/hdr_0.jpg"
            },
            "type": "opencv/capture/image"
        },
        "image_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 29.4369354248047,
                    "y": 468.169464111328
                }
            },
            "name": "image-2",
            "ports": {
                "filename": "$EXAMPLES/opencv/hdr_n2.jpg"
            },
            "type": "opencv/capture/image"
        },
        "image_2": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 191.802383422852,
                    "y": 472.95703125
                }
            },
            "name": "image-1",
            "ports": {
                "filename": "$EXAMPLES/opencv/hdr_n1.jpg"
            },
            "type": "opencv/capture/image"
        },
        "image_3": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 513.002502441406,
                    "y": 464.412750244141
                }
            },
            "name": "image+1",
            "ports": {
                "filename": "$EXAMPLES/opencv/hdr_p1.jpg"
            },
            "type": "opencv/capture/image"
        },
        "image_4": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 684.823059082031,
                    "y": 473.6845703125
                }
            },
            "name": "image+2",
            "ports": {
                "filename": "$EXAMPLES/opencv/hdr_p2.jpg"
            },
            "type": "opencv/capture/image"
        },
        "merge_debevec_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 1198.14709472656,
                    "y": 1201.82568359375
                }
            },
            "name": "merge_debevec",
            "type": "opencv/hdr/merge_debevec"
        },
        "network_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 1230.47143554688,
                    "y": 1703.83020019531
                }
            },
            "connections": [
                {
                    "in_node": "draw_0",
                    "in_port": "vertex_data",
                    "out_node": "background_0",
                    "out_port": "vertex_data"
                },
                {
                    "in_node": "program_0",
                    "in_port": "fragment_shader",
                    "out_node": "fragment_shader_0",
                    "out_port": "shader"
                },
                {
                    "in_node": "metadata_0",
                    "in_port": "frame",
                    "out_node": "input_0",
                    "out_port": "data"
                },
                {
                    "in_node": "opencv_texture_0",
                    "in_port": "frame",
                    "out_node": "input_0",
                    "out_port": "data"
                },
                {
                    "in_node": "split_vec2u_0",
                    "in_port": "vec",
                    "out_node": "metadata_0",
                    "out_port": "size"
                },
                {
                    "in_node": "viewport_0",
                    "in_port": "in_uniforms",
                    "out_node": "opencv_texture_0",
                    "out_port": "out_uniforms"
                },
                {
                    "in_node": "draw_0",
                    "in_port": "program",
                    "out_node": "program_0",
                    "out_port": "program"
                },
                {
                    "in_node": "unsigned_1",
                    "in_port": "value",
                    "out_node": "split_vec2u_0",
                    "out_port": "x"
                },
                {
                    "in_node": "unsigned_0",
                    "in_port": "value",
                    "out_node": "split_vec2u_0",
                    "out_port": "y"
                },
                {
                    "in_node": "opencv_texture_0",
                    "in_port": "in_uniforms",
                    "out_node": "unsigned_0",
                    "out_port": "out_uniforms"
                },
                {
                    "in_node": "unsigned_0",
                    "in_port": "in_uniforms",
                    "out_node": "unsigned_1",
                    "out_port": "out_uniforms"
                },
                {
                    "in_node": "program_0",
                    "in_port": "vertex_shader",
                    "out_node": "vertex_shader_0",
                    "out_port": "shader"
                },
                {
                    "in_node": "draw_0",
                    "in_port": "uniforms",
                    "out_node": "viewport_0",
                    "out_port": "out_uniforms"
                }
            ],
            "name": "network",
            "nodes": {
                "background_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 378.493469238281,
                            "y": 846.5810546875
                        }
                    },
                    "name": "background",
                    "type": "render/vertex_data/background"
                },
                "draw_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 597.115966796875,
                            "y": 727.212646484375
                        }
                    },
                    "name": "draw",
                    "type": "render/draw"
                },
                "fragment_shader_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 168.251327514648,
                            "y": 736.723999023438
                        }
                    },
                    "name": "fragment_shader",
                    "ports": {
                        "source": "#version 130 \n \nout vec4 color; \n \nin vec2 uv; \n\nuniform sampler2D image;\n\nvoid main() { \n\tif(uv.y < 0.0 || uv.y > 1.0)\n\t\tcolor = vec4(0,0,0,1);\n\telse\n\t\tcolor = vec4(texture(image, vec2(uv.x, 1.0-uv.y))); \n} \n"
                    },
                    "type": "render/fragment_shader"
                },
                "input_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 150.96418762207,
                            "y": -84.6720733642578
                        }
                    },
                    "name": "frame",
                    "type": "input"
                },
                "metadata_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 165.910888671875,
                            "y": 117.083778381348
                        }
                    },
                    "name": "opencv_metadata",
                    "type": "opencv/metadata"
                },
                "opencv_texture_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 562.957153320312,
                            "y": 428.043426513672
                        }
                    },
                    "name": "opencv_texture",
                    "ports": {
                        "mode": "Linear",
                        "name": "image"
                    },
                    "type": "render/uniforms/opencv_texture"
                },
                "program_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 374.836456298828,
                            "y": 625.601623535156
                        }
                    },
                    "name": "program",
                    "type": "render/program"
                },
                "split_vec2u_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 407.043975830078,
                            "y": 165.035598754883
                        }
                    },
                    "name": "split_vec2u",
                    "type": "maths/split_vec2u"
                },
                "unsigned_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 570.666015625,
                            "y": 243.660018920898
                        }
                    },
                    "name": "unsigned height",
                    "ports": {
                        "name": "image_height"
                    },
                    "type": "render/uniforms/unsigned"
                },
                "unsigned_1": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 567.202209472656,
                            "y": 58.0921211242676
                        }
                    },
                    "name": "unsigned width",
                    "ports": {
                        "name": "image_width"
                    },
                    "type": "render/uniforms/unsigned"
                },
                "vertex_shader_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 197.651947021484,
                            "y": 524.369689941406
                        }
                    },
                    "name": "vertex_shader",
                    "ports": {
                        "source": "#version 130 \n \nin vec3 P;                     // position attr from the vbo \n \nuniform mat4 iProjection;      // projection matrix \nuniform mat4 iModelView;       // modelview matrix \n\nuniform uint image_width;\nuniform uint image_height;\nuniform vec2 iResolution;\n\nout vec2 uv;                   // uv texturing parameters\n \nvoid main() {\n\t// compute the aspect ratio from image width and height\n\tfloat aspect = float(image_width) / float(image_height);\n\n\t// compute the screen aspect ratio\n\tfloat screen_aspect = iResolution.x / iResolution.y;\n\n\tgl_Position = vec4(P.x, P.y, 0, 1);\n\n\t// UV parameters are just untransformed world-space position\n\tuv = vec2(P/2.0);\n\tuv.y *= aspect / screen_aspect;\n\tuv += 0.5;\n} \n"
                    },
                    "type": "render/vertex_shader"
                },
                "viewport_0": {
                    "blind_data": {
                        "type": "possumwood::NodeData",
                        "value": {
                            "x": 597.060607910156,
                            "y": 600.486389160156
                        }
                    },
                    "name": "viewport",
                    "type": "render/uniforms/viewport"
                }
            },
            "type": "network"
        }
    },
    "scene_config": {
        "end_time": 5.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "ui_geometry": "AdnQywADAAAAAAAAAAAAAAAAB38AAAQTAAAAAAAAABQAAAQ6AAACVQAAAAACAAAAB4AAAAAAAAAAGAAAB38AAAQT",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAKRAAADbPwCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAAB1AAADbAAAAJgBAAADAAAAAQAAAagAAANs/AIAAAAC+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwEAAAB1AAABDwAAAHYBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAABhQAAAlwAAACqAQAAAwAAA0UAAANsAAAABAAAAAQAAAAIAAAACPwAAAAA"
}