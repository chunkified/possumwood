{
    "connections": [
        {
            "in_node": "draw_0",
            "in_port": "vertex_data",
            "out_node": "background_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "program_0",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "metadata_0",
            "in_port": "frame",
            "out_node": "image_0",
            "out_port": "frame"
        },
        {
            "in_node": "opencv_texture_0",
            "in_port": "frame",
            "out_node": "image_0",
            "out_port": "frame"
        },
        {
            "in_node": "split_vec2u_0",
            "in_port": "vec",
            "out_node": "metadata_0",
            "out_port": "size"
        },
        {
            "in_node": "viewport_0",
            "in_port": "in_uniforms",
            "out_node": "opencv_texture_0",
            "out_port": "out_uniforms"
        },
        {
            "in_node": "draw_0",
            "in_port": "program",
            "out_node": "program_0",
            "out_port": "program"
        },
        {
            "in_node": "unsigned_1",
            "in_port": "value",
            "out_node": "split_vec2u_0",
            "out_port": "x"
        },
        {
            "in_node": "unsigned_0",
            "in_port": "value",
            "out_node": "split_vec2u_0",
            "out_port": "y"
        },
        {
            "in_node": "opencv_texture_0",
            "in_port": "in_uniforms",
            "out_node": "unsigned_0",
            "out_port": "out_uniforms"
        },
        {
            "in_node": "unsigned_0",
            "in_port": "in_uniforms",
            "out_node": "unsigned_1",
            "out_port": "out_uniforms"
        },
        {
            "in_node": "program_0",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "draw_0",
            "in_port": "uniforms",
            "out_node": "viewport_0",
            "out_port": "out_uniforms"
        }
    ],
    "description": "### OpenCV image loading and display\n\nThis simple demo shows how to load an image using OpenCV's [`imread()`](https://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html?highlight=imread#imread) method, and pass the resulting image data to OpenGL as a texture and a set of additional metadata represented by GLSL uniforms. \n\nIn following demos, this OpenGL setup is wrapped in a subnetwork.",
    "nodes": {
        "background_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 444.582580566406,
                    "y": 841.497253417969
                }
            },
            "name": "background",
            "type": "render/vertex_data/background"
        },
        "draw_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 663.205078125,
                    "y": 722.128845214844
                }
            },
            "name": "draw",
            "type": "render/draw"
        },
        "fragment_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 234.340438842773,
                    "y": 731.640197753906
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nout vec4 color; \n \nin vec2 uv; \n\nuniform sampler2D image;\n\nvoid main() { \n\tif(uv.y < 0.0 || uv.y > 1.0)\n\t\tcolor = vec4(0,0,0,1);\n\telse\n\t\tcolor = vec4(texture(image, vec2(uv.x, 1.0-uv.y))); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "image_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 496.074584960938,
                    "y": -75.0654678344727
                }
            },
            "name": "image",
            "ports": {
                "filename": "$EXAMPLES/pexels/adorable-beautiful-beauty-2418886.jpg"
            },
            "type": "opencv/capture/image"
        },
        "metadata_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 583.658996582031,
                    "y": 120.829315185547
                }
            },
            "name": "opencv_metadata",
            "type": "opencv/metadata"
        },
        "opencv_texture_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 629.046264648438,
                    "y": 422.959655761719
                }
            },
            "name": "opencv_texture",
            "ports": {
                "mode": "Linear",
                "name": "image"
            },
            "type": "render/uniforms/opencv_texture"
        },
        "program_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 440.925567626953,
                    "y": 620.517822265625
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "split_vec2u_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 776.208435058594,
                    "y": 145.858551025391
                }
            },
            "name": "split_vec2u",
            "type": "maths/split_vec2u"
        },
        "unsigned_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 928.98486328125,
                    "y": 204.656723022461
                }
            },
            "name": "unsigned height",
            "ports": {
                "name": "image_height"
            },
            "type": "render/uniforms/unsigned"
        },
        "unsigned_1": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 941.176208496094,
                    "y": 19.0888195037842
                }
            },
            "name": "unsigned width",
            "ports": {
                "name": "image_width"
            },
            "type": "render/uniforms/unsigned"
        },
        "vertex_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 263.741058349609,
                    "y": 519.285888671875
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130 \n \nin vec3 P;                     // position attr from the vbo \n \nuniform mat4 iProjection;      // projection matrix \nuniform mat4 iModelView;       // modelview matrix \n\nuniform uint image_width;\nuniform uint image_height;\nuniform vec2 iResolution;\n\nout vec2 uv;                   // uv texturing parameters\n \nvoid main() {\n\t// compute the aspect ratio from image width and height\n\tfloat aspect = float(image_width) / float(image_height);\n\n\t// compute the screen aspect ratio\n\tfloat screen_aspect = iResolution.x / iResolution.y;\n\n\tgl_Position = vec4(P.x, P.y, 0, 1);\n\n\t// UV parameters are just untransformed world-space position\n\tuv = vec2(P/2.0);\n\tuv.y *= aspect / screen_aspect;\n\tuv += 0.5;\n} \n"
            },
            "type": "render/vertex_shader"
        },
        "viewport_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 663.149719238281,
                    "y": 595.402587890625
                }
            },
            "name": "viewport",
            "type": "render/uniforms/viewport"
        }
    },
    "scene_config": {
        "end_time": 5.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "ui_geometry": "AdnQywADAAAAAAAAAAAAAQAABqoAAAOfAAAAAAAAABQAAASlAAACVQAAAAACAAAABqsAAAAAAAAAFwAABqoAAAOf",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAL8AAAC+fwCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAAB1AAAC+QAAAJgBAAADAAAAAQAAAagAAAL5/AIAAAAC+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwEAAAB1AAABFQAAAHYBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAABiwAAAeMAAACqAQAAAwAAAgUAAAL5AAAABAAAAAQAAAAIAAAACPwAAAAA"
}
